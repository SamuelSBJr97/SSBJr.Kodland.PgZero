%% Pipeline de geração procedural — visão geral
graph TD
  Start([Player moves / world tick]) --> CheckAhead{Player area + lookahead}
  CheckAhead -->|if distance >= chunk_size| GenerateAhead["Gerar chunks 3 blocos à frente"]
  GenerateAhead --> ForEachRoom["Para cada sala a gerar"]

  subgraph RoomGeneration [Geração da sala]
    direction TB
    ForEachRoom --> GenShape["Gerar forma convexa\n35 células (tile-based)"]
    GenShape --> EnsureDoor["Garantir porta no canto\n(posição de canto válida)"]
    EnsureDoor --> CarveFloors["Marcar 35 células como chão\n(o resto bloqueado)"]
  end

  CarveFloors --> ConnectPaths["Gerar caminho procedural\n(conectividade: A* / carve walk)"]
  ConnectPaths --> SpawnBugs["Posicionar bugs nas bordas e entradas\n(instrumentar IA de cerco)"]
  SpawnBugs --> ValidateCells["Marcar células ocupadas: itens/bugs/portas\n(jogador só pode andar sobre vazias)"]
  ValidateCells --> RoomReady([Sala pronta])
  RoomReady --> Integrate["Integrar no mapa e atualizar conexões"]
  Integrate --> End([Ready to be entered])

  %% notas e regras
  classDef note fill:#f9f,stroke:#333,stroke-width:1px
  Rules["Regras importantes:\n- Sala: exatamente 35 células de chão (convexo)\n- Porta: posição obrigatória em um canto da sala\n- Movimentação: jogador só sobre células vazias\n- Geração lookahead: 3 blocos adiante do jogador\n- Caminhos: gerados proceduralmente garantindo conectividade"]:::note
  Rules -.-> GenerateAhead
  Rules -.-> GenShape

  style GenShape fill:#e3f2fd,stroke:#0288d1
  style SpawnBugs fill:#fff3e0,stroke:#fb8c00
